String Methods
String methods are used to manipulate and handle textual data. Strings are immutable, so these methods return new values.
1. charAt(index)
Returns the character at the specified index.

const str = "Hello";
console.log(str.charAt(1)); // "e"
2. concat(str1, str2, ...)
Concatenates strings and returns a new string.

const str1 = "Hello";
const str2 = "World";
console.log(str1.concat(", ", str2)); // "Hello, World"
3. includes(substring)
Checks if the string contains the specified substring.

javascript
Copy code
const str = "JavaScript is fun";
console.log(str.includes("fun")); // true
4. indexOf(substring)
Returns the index of the first occurrence of the substring, or -1 if not found.

const str = "JavaScript";
console.log(str.indexOf("a")); // 1
console.log(str.indexOf("z")); // -1
5. replace(searchValue, replaceValue)
Replaces the first occurrence of searchValue with replaceValue.

const str = "JavaScript is awesome!";
console.log(str.replace("awesome", "fun")); // "JavaScript is fun!"
6. slice(start, end)
Extracts a part of the string and returns it.

const str = "JavaScript";
console.log(str.slice(0, 4)); // "Java"
console.log(str.slice(-6)); // "Script"
7. split(separator)
Splits the string into an array of substrings.

const str = "apple,banana,cherry";
console.log(str.split(",")); // ["apple", "banana", "cherry"]
8. toLowerCase() and toUpperCase()
Converts the string to lower/upper case.

const str = "JavaScript";
console.log(str.toLowerCase()); // "javascript"
console.log(str.toUpperCase()); // "JAVASCRIPT"
9. trim()
Removes whitespace from both ends of the string.

const str = "  Hello World  ";
console.log(str.trim()); // "Hello World"

Array Methods
Array methods are used to manipulate and work with lists of data.
1. push() and pop()
Adds or removes elements at the end of the array.

const arr = [1, 2, 3];
arr.push(4); // Add 4
console.log(arr); // [1, 2, 3, 4]
arr.pop(); // Remove last element
console.log(arr); // [1, 2, 3]
2. shift() and unshift()
Adds or removes elements at the beginning of the array.

const arr = [1, 2, 3];
arr.unshift(0); // Add 0
console.log(arr); // [0, 1, 2, 3]
arr.shift(); // Remove first element
console.log(arr); // [1, 2, 3]
3. map(callback)
Applies a function to every element of the array and returns a new array.

const arr = [1, 2, 3];
const doubled = arr.map(x => x * 2);
console.log(doubled); // [2, 4, 6]
4. filter(callback)
Returns a new array with elements that pass the condition.

const arr = [1, 2, 3, 4];
const evens = arr.filter(x => x % 2 === 0);
console.log(evens); // [2, 4]
5. reduce(callback, initialValue)
Reduces the array to a single value.

const arr = [1, 2, 3];
const sum = arr.reduce((total, num) => total + num, 0);
console.log(sum); // 6
6. find(callback)
Returns the first element that matches the condition.

const arr = [1, 2, 3, 4];
const found = arr.find(x => x > 2);
console.log(found); // 3
7. sort(compareFunction)
Sorts the array elements in place.

const arr = [3, 1, 4, 2];
arr.sort(); // Default: lexicographical order
console.log(arr); // [1, 2, 3, 4]
8. join(separator)
Joins all array elements into a string.

const arr = ["apple", "banana", "cherry"];
console.log(arr.join(", ")); // "apple, banana, cherry"

Object Methods
Object methods are used to work with key-value pairs.
1. Object.keys()
Returns an array of the object's keys.

const obj = { a: 1, b: 2, c: 3 };
console.log(Object.keys(obj)); // ["a", "b", "c"]
2. Object.values()
Returns an array of the object's values.

const obj = { a: 1, b: 2, c: 3 };
console.log(Object.values(obj)); // [1, 2, 3]
3. Object.entries()
Returns an array of key-value pairs.

const obj = { a: 1, b: 2, c: 3 };
console.log(Object.entries(obj)); // [["a", 1], ["b", 2], ["c", 3]]
4. Object.assign()
Copies properties from one or more objects into a target object.

const target = { a: 1 };
const source = { b: 2 };
Object.assign(target, source);
console.log(target); // { a: 1, b: 2 }
5. Object.freeze()
Prevents modifications to an object.

const obj = { a: 1 };
Object.freeze(obj);
obj.a = 2; // Fails silently in non-strict mode
console.log(obj.a); // 1
6. Object.hasOwnProperty()
Checks if the object has a specific property.

const obj = { a: 1 };
console.log(obj.hasOwnProperty("a")); // true
console.log(obj.hasOwnProperty("b")); // false

----------------------
1. push()
• Description: Adds one or more elements to the end of an array and returns the new length of the array.
• Syntax: array.push(element1, element2, ...)
• Example:

js
Copy code
let fruits = ['apple', 'banana'];
fruits.push('orange');
console.log(fruits);  // ['apple', 'banana', 'orange']
2. pop()
• Description: Removes the last element from an array and returns that element.
• Syntax: array.pop()
• Example:

js
Copy code
let fruits = ['apple', 'banana', 'orange'];
let lastFruit = fruits.pop();
console.log(lastFruit);  // 'orange'
console.log(fruits);  // ['apple', 'banana']
3. shift()
• Description: Removes the first element from an array and returns that element, shifting all other elements down one index.
• Syntax: array.shift()
• Example:

js
Copy code
let fruits = ['apple', 'banana', 'orange'];
let firstFruit = fruits.shift();
console.log(firstFruit);  // 'apple'
console.log(fruits);  // ['banana', 'orange']
4. unshift()
• Description: Adds one or more elements to the beginning of an array and returns the new length of the array.
• Syntax: array.unshift(element1, element2, ...)
• Example:

js
Copy code
let fruits = ['banana', 'orange'];
fruits.unshift('apple');
console.log(fruits);  // ['apple', 'banana', 'orange']
5. concat()
• Description: Combines two or more arrays and returns a new array.
• Syntax: array.concat(array2, array3, ...)
• Example:

js
Copy code
let fruits = ['apple', 'banana'];
let vegetables = ['carrot', 'spinach'];
let combined = fruits.concat(vegetables);
console.log(combined);  // ['apple', 'banana', 'carrot', 'spinach']
6. slice()
• Description: Returns a shallow copy of a portion of an array into a new array, without modifying the original array.
• Syntax: array.slice(start, end)
• Example:

js
Copy code
let fruits = ['apple', 'banana', 'orange', 'grapes'];
let slicedFruits = fruits.slice(1, 3);
console.log(slicedFruits);  // ['banana', 'orange']
7. splice()
• Description: Changes the contents of an array by removing or replacing existing elements and/or adding new elements.
• Syntax: array.splice(start, deleteCount, item1, item2, ...)
• Example:

js
Copy code
let fruits = ['apple', 'banana', 'orange'];
fruits.splice(1, 1, 'grapes');
console.log(fruits);  // ['apple', 'grapes', 'orange']
8. forEach()
• Description: Executes a provided function once for each array element.
• Syntax: array.forEach(callback(currentValue, index, array))
• Example:

js
Copy code
let fruits = ['apple', 'banana', 'orange'];
fruits.forEach((fruit, index) => {
  console.log(index, fruit);  // 0 'apple', 1 'banana', 2 'orange'
});
9. map()
• Description: Creates a new array populated with the results of calling a provided function on every element in the calling array.
• Syntax: array.map(callback(currentValue, index, array))
• Example:

js
Copy code
let numbers = [1, 2, 3];
let squares = numbers.map(num => num * num);
console.log(squares);  // [1, 4, 9]
10. filter()
• Description: Creates a new array with all elements that pass the test implemented by the provided function.
• Syntax: array.filter(callback(currentValue, index, array))
• Example:

js
Copy code
let numbers = [1, 2, 3, 4, 5];
let evenNumbers = numbers.filter(num => num % 2 === 0);
console.log(evenNumbers);  // [2, 4]
11. reduce()
• Description: Executes a reducer function (that you provide) on each element of the array (from left to right) to reduce it to a single value.
• Syntax: array.reduce(callback(accumulator, currentValue, index, array), initialValue)
• Example:

js
Copy code
let numbers = [1, 2, 3, 4];
let sum = numbers.reduce((acc, num) => acc + num, 0);
console.log(sum);  // 10
12. find()
• Description: Returns the first element in the array that satisfies the provided testing function.
• Syntax: array.find(callback(currentValue, index, array))
• Example:

js
Copy code
let numbers = [1, 2, 3, 4];
let firstEven = numbers.find(num => num % 2 === 0);
console.log(firstEven);  // 2
13. indexOf()
• Description: Returns the first index at which a given element is found, or -1 if it is not found.
• Syntax: array.indexOf(searchElement, fromIndex)
• Example:

js
Copy code
let fruits = ['apple', 'banana', 'orange'];
let index = fruits.indexOf('banana');
console.log(index);  // 1
14. includes()
• Description: Determines whether an array contains a certain element, returning true or false accordingly.
• Syntax: array.includes(element, fromIndex)
• Example:

js
Copy code
let fruits = ['apple', 'banana', 'orange'];
let hasBanana = fruits.includes('banana');
console.log(hasBanana);  // true
15. sort()
• Description: Sorts the elements of an array in place and returns the sorted array.
• Syntax: array.sort(compareFunction)
• Example:

js
Copy code
let numbers = [3, 1, 4, 2];
numbers.sort((a, b) => a - b);
console.log(numbers);  // [1, 2, 3, 4]
16. reverse()
• Description: Reverses the order of the elements in an array in place.
• Syntax: array.reverse()
• Example:

js
Copy code
let numbers = [1, 2, 3];
numbers.reverse();
console.log(numbers);  // [3, 2, 1]
17. join()
• Description: Joins all elements of an array into a single string, with a specified separator.
• Syntax: array.join(separator)
• Example:

js
Copy code
let fruits = ['apple', 'banana', 'orange'];
let result = fruits.join(', ');
console.log(result);  // 'apple, banana, orange'
18. every()
• Description: Tests whether all elements in an array pass a given test (provided as a function).
• Syntax: array.every(callback(currentValue, index, array))
• Example:
//some and every return true or false based on the condition
js
Copy code
let numbers = [1, 2, 3];
let allPositive = numbers.every(num => num > 0);
console.log(allPositive);  // true
19. some()
• Description: Tests whether at least one element in an array passes the given test.
• Syntax: array.some(callback(currentValue, index, array))
• Example:

js
Copy code
let numbers = [1, -2, 3];
let hasNegative = numbers.some(num => num < 0);
console.log(hasNegative);  // true
--------------
1. 1. length
• Description: Returns the length of a string (the number of characters).
• Syntax: string.length
• Example:

js
Copy code
let text = 'Hello, world!';
console.log(text.length);  // 13

2. charAt()
• Description: Returns the character at a specified index.
• Syntax: string.charAt(index)
• Example:

js
Copy code
let text = 'Hello';
console.log(text.charAt(1));  // 'e'

3. charCodeAt()
• Description: Returns the Unicode (ASCII) value of the character at the specified index.
• Syntax: string.charCodeAt(index)
• Example:

js
Copy code
let text = 'A';
console.log(text.charCodeAt(0));  // 65

4. indexOf()
• Description: Returns the index of the first occurrence of a specified substring, or -1 if it's not found.
• Syntax: string.indexOf(substring)
• Example:

js
Copy code
let text = 'Hello, world!';
console.log(text.indexOf('world'));  // 7
console.log(text.indexOf('JavaScript'));  // -1

5. lastIndexOf()
• Description: Returns the index of the last occurrence of a specified substring, or -1 if it's not found.
• Syntax: string.lastIndexOf(substring)
• Example:

js
Copy code
let text = 'Hello, world! Hello!';
console.log(text.lastIndexOf('Hello'));  // 13

6. includes()
• Description: Checks if a string contains a specified substring and returns true or false.
• Syntax: string.includes(substring)
• Example:

js
Copy code
let text = 'Hello, world!';
console.log(text.includes('world'));  // true
console.log(text.includes('JavaScript'));  // false

7. startsWith()
• Description: Checks if a string starts with a specified substring.
• Syntax: string.startsWith(substring)
• Example:

js
Copy code
let text = 'Hello, world!';
console.log(text.startsWith('Hello'));  // true
console.log(text.startsWith('world'));  // false

8. endsWith()
• Description: Checks if a string ends with a specified substring.
• Syntax: string.endsWith(substring)
• Example:

js
Copy code
let text = 'Hello, world!';
console.log(text.endsWith('world!'));  // true
console.log(text.endsWith('Hello'));  // false

9. slice()
• Description: Extracts a section of a string and returns it as a new string. It doesn't modify the original string.
• Syntax: string.slice(start, end)
• Example:

js
Copy code
let text = 'Hello, world!';
console.log(text.slice(7, 12));  // 'world'
console.log(text.slice(0, 5));   // 'Hello'

10. substring()
• Description: Similar to slice(), but it swaps the start and end indexes if the start index is greater than the end index.
• Syntax: string.substring(start, end)
• Example:

js
Copy code
let text = 'Hello, world!';
console.log(text.substring(7, 12));  // 'world'
console.log(text.substring(12, 7));  // 'world' (start and end are swapped)

11. replace()
• Description: Replaces the first occurrence of a specified substring with another substring.
• Syntax: string.replace(searchValue, newValue)
• Example:

js
Copy code
let text = 'Hello, world!';
console.log(text.replace('world', 'JavaScript'));  // 'Hello, JavaScript!'

12. replaceAll()
• Description: Replaces all occurrences of a specified substring with another substring.
• Syntax: string.replaceAll(searchValue, newValue)
• Example:

js
Copy code
let text = 'Hello, world! Welcome to the world!';
console.log(text.replaceAll('world', 'JavaScript'));  // 'Hello, JavaScript! Welcome to the JavaScript!'

13. split()
• Description: Splits a string into an array of substrings based on a specified separator.
• Syntax: string.split(separator)
• Example:

js
Copy code
let text = 'Hello, world!';
let words = text.split(', ');
console.log(words);  // ['Hello', 'world!']

14. toLowerCase()
• Description: Converts all characters in a string to lowercase.
• Syntax: string.toLowerCase()
• Example:

js
Copy code
let text = 'Hello, World!';
console.log(text.toLowerCase());  // 'hello, world!'

15. toUpperCase()
• Description: Converts all characters in a string to uppercase.
• Syntax: string.toUpperCase()
• Example:

js
Copy code
let text = 'Hello, World!';
console.log(text.toUpperCase());  // 'HELLO, WORLD!'

16. trim()
• Description: Removes whitespace from both ends of a string.
• Syntax: string.trim()
• Example:

js
Copy code
let text = '  Hello, world!  ';
console.log(text.trim());  // 'Hello, world!'

17. padStart()
• Description: Pads the current string with another string until it reaches a specified length, starting from the beginning.
• Syntax: string.padStart(targetLength, padString)
• Example:

js
Copy code
let text = '5';
console.log(text.padStart(3, '0'));  // '005'

18. padEnd()
• Description: Pads the current string with another string until it reaches a specified length, starting from the end.
• Syntax: string.padEnd(targetLength, padString)
• Example:

js
Copy code
let text = '5';
console.log(text.padEnd(3, '0'));  // '500'

19. repeat()
• Description: Returns a new string with a specified number of copies of the original string.
• Syntax: string.repeat(count)
• Example:

js
Copy code
let text = 'Hello';
console.log(text.repeat(3));  // 'HelloHelloHello'

20. localeCompare()
• Description: Compares two strings and returns a number indicating whether the reference string comes before, after, or is the same as the given string in sort order.
• Syntax: string.localeCompare(compareString)
• Example:

js
Copy code
let text1 = 'apple';
let text2 = 'banana';
console.log(text1.localeCompare(text2));  // -1 (because 'apple' comes before 'banana')

21. search()
• Description: Executes a regular expression search on a string and returns the index of the first match, or -1 if not found.
• Syntax: string.search(regexp)
• Example:

js
Copy code
let text = 'Hello, world!';
console.log(text.search('world'));  // 7

22. match()
• Description: Returns an array of all matches found using a regular expression.
• Syntax: string.match(regexp)
• Example:

js
Copy code
let text = 'Hello, world! Hello again!';
console.log(text.match(/Hello/g));  // ['Hello', 'Hello']

23. fromCharCode()
• Description: Converts Unicode values into characters (used as a static method of the String object).
• Syntax: String.fromCharCode(charCode)
• Example:

js
Copy code
console.log(String.fromCharCode(65));  // 'A'

